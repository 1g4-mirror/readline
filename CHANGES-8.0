This document details the changes between this version, readline-8.0, and the
previous version, readline-7.0.

1.  Changes to Readline

a. Added a guard to prevent nested macros from causing an infinite expansion
   loop.

b. Instead of allocating enough history list entries to hold the maximum list
   size, cap the number allocated initially.
   
c. Added a strategy to avoid allocating huge amounts of memory if a block of
   history entries without timestamps occurs after a block with timestamps.

d. Added support for keyboard timeouts when an ESC character is the last
   character in a macro.

e. There are several performance improvements when in a UTF-8 locale.

f. Readline does a better job of preserving the original set of blocked
   signals when using pselect() to wait for input.

g. Fixed a bug that caused multibyte characters in macros to be mishandled.

h. Fixed several bugs in the code that calculates line breaks when expanding
   prompts that span several lines, contain multibyte characters, and contain
   invisible character seqeuences.

i. Fixed several bugs in cursor positioning when displaying lines with prompts
   containing invisible characters and multibyte characters.

j. When performing case-insensitive completion, Readline no longer sorts the
   list of matches unless directed to do so.

k. Fixed a problem with key sequences ending with a backslash.

l. Fixed out-of-bounds and free memory read errors found via fuzzing.

m. Fixed several cases where the mark was set to an invalid value.

n. Fixed a problem with the case-changing operators in the case where the
   lower and upper case versions of a character do not have the same number
   of bytes.

o. Handle incremental and non-incremental search character reads returning EOF.

p. Handle the case where a failing readline command at the end of a multi-key
   sequence could be misinterpreted.

q. The history library now prints a meaningful error message if the history
   file isn't a regular file.

r. Fixed a problem with vi-mode redo (`.') on a command when trying to replace
   a multibyte character.

s. The key binding code now attempts to remove a keymap if a key unbinding
   leaves it empty.

t. Fixed a line-wrapping issue that caused problems for some terminal
   emulators.

u. If there is a key bound to the tty's VDISCARD special character, readline
   disables VDISCARD while it is active.

v. Fixed a problem with exiting bracketed paste mode on terminals that assume
   the bracketed paste mode character sequence contains visible characters.

w. Fixed a bug that could cause a key binding command to refer to an
   uninitialized variable.

x. Added more UTF-8-specific versions of multibyte functions, and optimized
   existing functions if the current locale uses UTF-8 encoding.

y. Fixed a problem with bracketed-paste inserting more than one character and
   interacting with other readline functions.

z. Fixed a bug that caused the history library to attempt to append a history
   line to a non-existent history entry.

aa. If using bracketed paste mode, output a newline after the \r that is the
    last character of the mode disable string to avoid overwriting output.

bb. Fixes to the vi-mode `b', `B', `w', `W', `e', and `E' commands to better
    handle multibyte characters.

cc. Fixed a redisplay problem that caused an extra newline to be generated on
    accept-line when the line length is exactly the screenwidth.

2.  New Features in Readline

a. Non-incremental vi-mode search (`N', `n') can search for a shell pattern, as
   Posix specifies (uses fnmatch(3) if available).

b. There are new `next-screen-line' and `previous-screen-line' bindable
   commands, which move the cursor to the same column in the next, or previous,
   physical line, respectively.

c. There are default key bindings for control-arrow-key key combinations.

d. A negative argument (-N) to `quoted-insert' means to insert the next N
   characters using quoted-insert.

e. New public function: rl_check_signals(), which allows applications to
   respond to signals that readline catches while waiting for input using
   a custom read function.

f. There is new support for conditionally testing the readline version in an
   inputrc file, with a full set of arithmetic comparison operators available.

g. There is a simple variable comparison facility available for use within an
   inputrc file. Allowable operators are equality and inequality; string
   variables may be compared to a value; boolean variables must be compared to
   either `on' or `off'; variable names are separated from the operator by
   whitespace.

h. The history expansion library now understands command and process
   substitution and extended globbing and allows them to appear anywhere in a
   word.

i. The history library has a new variable that allows applications to set the
   initial quoting state, so quoting state can be inherited from a previous
   line.
